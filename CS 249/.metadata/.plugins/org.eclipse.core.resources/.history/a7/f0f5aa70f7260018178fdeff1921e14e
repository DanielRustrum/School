package p6_Package;

public class IteratorClassLL
{
    NodeClass headRef;
    NodeClass cursorRef;
    private final int FAILED_ACCESS = -999999;
    
    IteratorClassLL()
    {
        headRef = new NodeClass(9);
        cursorRef = headRef;
    }
    
    IteratorClassLL(IteratorClassLL copied)
    {
        NodeClass workingRef = copied.headRef;
        headRef = new NodeClass(copied.headRef.value);
        cursorRef = headRef;
        while(workingRef.nextNode != null)
        {
            NodeClass nextNewNode = new NodeClass(workingRef.nextNode.value);
            cursorRef.nextNode = nextNewNode;
            cursorRef = cursorRef.nextNode;
            workingRef = workingRef.nextNode;
        }

    }
    
    public void insertPriorToIterator(int newValue)
    {
        movePrevious();
        insertAfterIterator(newValue);
        moveNext();
        moveNext();
    }
    
    public void insertAfterIterator(int newValue)
    {
        NodeClass newNode = new NodeClass(newValue);
        if(cursorRef.nextNode != null)
        {            
            newNode.nextNode = cursorRef.nextNode;
        }
        newNode.nextNode = null;
        cursorRef.nextNode = newNode;
    }
    
    public void moveNext()
    {
        cursorRef = cursorRef.nextNode;
    }
    
    public void movePrevious()
    {
        NodeClass workingRef = headRef;
        while(workingRef.nextNode != null)
        {
            if(workingRef.nextNode == cursorRef)
            {
                cursorRef = workingRef;            
            }
            else
            {
                workingRef = workingRef.nextNode;
            }
        }
    }
    
    private void movePreviousHelper(NodeClass workingRef)
    {
        
    }
    
    public int retrieveAtCurrent()
    {
        return cursorRef.value;
    }
    
    public int removeAtCurrent()
    {
        int cursorValue = cursorRef.value;
        if(cursorRef.nextNode != null)
        {
            movePrevious();
            cursorRef.nextNode = cursorRef.nextNode.nextNode;
        }
        else
        {
            cursorRef = null;
        }
        return cursorValue;
    }
    
    public void setToBeginning()
    {
        cursorRef = headRef;
    }
    
    public void setToEnd()
    {
            setToEndHelper(headRef);
    }
    
    private void setToEndHelper(NodeClass workingRef)
    {
        if(workingRef.nextNode != null)
        {
            cursorRef = workingRef.nextNode;
            setToEndHelper(workingRef.nextNode);
        }
    }
    
    public boolean isAtEnd()
    {
        return cursorRef.nextNode == null;
    }
    
    public boolean isAtBeginning()
    {
        return cursorRef == headRef;
    }
    
    public boolean isEmpty()
    {
        return headRef == null;
    }
    
    public void clear()
    {
        headRef = null;
    }
    
    public String toString()
    {
        return toStringHelper(headRef);
    }
    
    private String toStringHelper(NodeClass workingRef)
    {
        @SuppressWarnings("unused")
        String combinedString = "";
        if(cursorRef.nextNode == null)
        {
            System.out.println(workingRef.nextNode);
            combinedString += toStringHelper(workingRef.nextNode);
        }
        // fine
        if(workingRef == cursorRef)
        {
            return " |" + workingRef.value + "|";
        }
        return " " + workingRef.value;
    }
    
    private class NodeClass
    {
        public int value;
        public NodeClass nextNode;
        NodeClass(int inVal)
        {
            value = inVal;
        }
    }
}
