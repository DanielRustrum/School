package p6_Package;

public class IteratorClassLL
{
    NodeClass headRef;
    NodeClass cursorRef;
    int FAILED_ACCESS = -999999;
    
    IteratorClassLL()
    {
        
    }
    
    IteratorClassLL(IteratorClassLL copied)
    {
        NodeClass workingRef = copied.headRef;
        while(true)
        {
            if(workingRef.nextNode.nextNode == null)
            {                
                headRef = copied.headRef;
            }
            else
            {                
                workingRef = workingRef.nextNode;
            }
        }

    }
    
    public void insertPriorToIterator(int newValue)
    {
        
    }
    
    public void insertAfterIterator(int newValue)
    {
        
    }
    
    public void moveNext()
    {
        
    }
    
    public void movePrevious()
    {
        
    }
    
    private void movePreviousHelper(NodeClass workingRef)
    {
        
    }
    
    public int retrieveAtCurrent()
    {
        
    }
    
    public int removeAtCurrent()
    {
        
    }
    
    public void setToBeginning()
    {
        
    }
    
    public void setToEnd()
    {
        
    }
    
    private void setToEndHelper(NodeClass workingRef)
    {
        
    }
    
    public boolean isAtEnd()
    {
        
    }
    
    public boolean isAtBeginning()
    {
        
    }
    
    public boolean isEmpty()
    {
        
    }
    
    public void clear()
    {
        
    }
    
    public String toString()
    {
        
    }
    
    private class NodeClass
    {
        public int value;
        public NodeClass nextNode;
        NodeClass(int inVal)
        {
            value = inVal;
        }
    }
}
