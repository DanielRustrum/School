/**
 * 
 */
package project_1;

/**
 * @author daniel_rustrum
 *
 */
public class DigitClass
{
    
    /**
     * Holds the base of a given value
     */
    int base;
    
    /**
     * An Array for holding the digits in a number
     */
    int[] digitArray;
    
    /**
     * The maximum digits held for this value
     */
    int maxDigits;
    
    /**
     * current number of digits held for this value
     */
    int numDigits;
    
    /**
     * A flag that is set when an operation goes over the maxDigits allowed
     */
    boolean overflow;
	
    /**
     * Copy Constructor For DigitClass
     * 
     * @param copied - DigitClass object to be copied
     */
    public DigitClass(DigitClass copied)
    {
        base = copied.base;
        maxDigits = copied.maxDigits;
        numDigits = copied.numDigits;
        overflow = copied.overflow;
        digitArray = copyArray(copied.digitArray);
    }
	
    /**
     * Default Constructor for DigitClass
     * 
     * @param baseSet - sets base
     * @param maxDigit - sets maximum number of digit values
     * @param decValSet - accepts a decimal value to be stored as the DigitClass Value
     */
    public DigitClass(int baseSet, int maxDigit, int decValSet)
    {
        base = baseSet;
        maxDigits = maxDigit;
        initalizeDigits();
        decToBase(decValSet);
    }
	
    /**
     * Copies an array for the copy constructor
     * 
     * @param copiedArray - takes in the array to be copied
     * @return arrayToBeCopied - returns a copied array for the copy constructor
     */
    private int[] copyArray(int[] copiedArray)
    {
        int index;
        int[] arrayToBeCopiedToo = {0};
        for(index = 0;index < numDigits;index++)
        {
            arrayToBeCopiedToo[index] = copiedArray[index];
        }
        return arrayToBeCopiedToo;
    }

    /**
     * Convert Positive Integer into base
     * 
     * @param decValue - decimal value to be converted
     * @return int[] - array holding converted value
     * @return null - returns if base is not between 1 and 10; it sets the overflow tag 
     */
    private int[] decToBase(int decValue)
    {
        int index = 0;
        if(base < 1 || base > 10)
        {
            overflow = true;
        }
        while(decValue >= 0)
        {
            digitArray[index] = decValue%base;
            decValue /= base;
            index++;
        }
        numDigits = index;
        return digitArray;
    }
      
    /**
     * Access the as a decimal value
     * 
     * @return int - decimal value
     */
    public int getValueAsDecimal()
    {
        // Variables For Overflow Check
        int overflowedResult = 0;

        // Variables For Conversion
        int index = 0;
        int maxNumberAtPosition = 0;
        int productOfMaxAndDigitAtPosition = 0;
        int convertedValue = 0;

        // Check Overflow And Return Result
        if(overflow)
        {
            return overflowedResult;
        }
		
        // Convert Base To Decimal
        while(index < numDigits && !isZero())
        {
            maxNumberAtPosition = intToPower(base, index);
            productOfMaxAndDigitAtPosition = maxNumberAtPosition * digitArray[index];
            convertedValue += productOfMaxAndDigitAtPosition;
            index++;
        }

        //	Return Result
        return convertedValue;
    }

    /**
     * Accesses value directly
     * 
     * @return String - value in base form
     */
    public String getValueAsBase()
    {
        // Check For Overflow and Return Result
        String overflowedResult = "Value has Overflowed";
        if(overflow)
        {
            return overflowedResult;
        }
       
        // Format Base As String	
        int index;
        String valueAsBase = "";
        String tempIntHolder = "";
        
        for(index = maxDigits; index>0; index--)
        {
            tempIntHolder = Integer.toString(digitArray[index]);
            valueAsBase += tempIntHolder;
        }
        
        // Return Formatted Result
        return valueAsBase;
    }
    
    /**
     * creates a new array full of zeros
     * 
     * @return int[] - returns array that is created and initalized
     */
    public int[] initalizeDigits()
    {
        int index;
        digitArray = new int[maxDigits];
        for(index = 0; index<maxDigits;index++)
        {
            digitArray[index] = 0;
        }
        return digitArray;
    }
	
    /**
     * 
     * 
     * @param base
     * @param exponent
     * @return
     */
    int intToPower(int base, int exponent)
    {
        if(exponent > 0)
        {
            return base*intToPower(base,exponent-1);
        }
        return 1;
    }
	
    /**
     * 
     * 
     * @return
     */
    public boolean isZero()
    {
        return(numDigits <= 1 && digitArray[0] == 0);
    }
}