package p7_Package;

public class GenericBSTClass<GenericData extends java.lang.Comparable<GenericData>> {

    
    private BST_Node BST_Root;
    public static final int PREORDER_TRAVERSE = 101;
    public static final int INORDER_TRAVERSE = 102;
    public static final int POSTORDER_TRAVERSE = 103;
    
    
    
    public GenericBSTClass()
    {
        BST_Root = new BST_Node(null);
    }
    
    public void insert(GenericData inData)
    {
        GenericData searched = search(inData);
        if(searched == null)
        {
            insertHelper(BST_Root, inData);
        }
    }
    
    private void insertHelper(BST_Node localRoot, GenericData inData)
    {
        if(localRoot.nodeData == null)
        {
            localRoot = new BST_Node(inData);
        }
        if(localRoot.nodeData.compareTo(inData) < 0)
        {
            insertHelper(localRoot.leftChildRef, inData);
        }
        if(localRoot.nodeData.compareTo(inData) > 0)
        {
            insertHelper(localRoot.rightChildRef, inData);
        }
    }
    
    public GenericData removeNode(GenericData inData)
    {
        GenericData searched = search(inData);
        BST_Node removed;
        if(searched != null)
        {
            removed = removeNodeHelper(BST_Root, inData);
            return removed.nodeData;
        }
        return null;
    }

    private BST_Node removeNodeHelper(BST_Node localRoot, GenericData outData)
    {
        BST_Node removedNode = localRoot;
        if(localRoot.nodeData.compareTo(outData) < 0)
        {
            removeNodeHelper(localRoot.leftChildRef, outData);
        }
        if(localRoot.nodeData.compareTo(outData) > 0)
        {
            removeNodeHelper(localRoot.rightChildRef, outData);
        }
        removeNodeFromTree(localRoot);
        return removedNode;
    }
    
    private BST_Node removeNodeFromTree(BST_Node localRoot)
    {
        BST_Node maxLocalNode;
        
        // No Children
        if(localRoot.leftChildRef == null && localRoot.rightChildRef == null)
        {
            return localRoot = null;
        }
        // Single Child
        if(localRoot.leftChildRef == null)
        {
            return localRoot = localRoot.rightChildRef;
        }
        if(localRoot.rightChildRef == null)
        {
            return localRoot = localRoot.leftChildRef;
        }
        
        // Two Children
        maxLocalNode = removeFromMax(localRoot, localRoot);
        localRoot = maxLocalNode;
        return localRoot;
         
    }
    
    private BST_Node removeFromMax(BST_Node maxParent, BST_Node maxLoc)
    {
        if(maxLoc.leftChildRef.rightChildRef != null)
        {
            return maxLoc.leftChildRef.rightChildRef;
        }
        return maxLoc.leftChildRef;
    }
    
    public GenericData search(GenericData searchData)
    {
        return searchHelper(BST_Root, searchData);
    }
    
    private GenericData searchHelper(BST_Node localRoot, GenericData searchData)
    {
        if(localRoot.nodeData == null)
        {
            return null;
        }
        if(localRoot.nodeData.compareTo(searchData) < 0)
        {
            return searchHelper(localRoot.leftChildRef, searchData);
        }
        if(localRoot.nodeData.compareTo(searchData) > 0)
        {
            return searchHelper(localRoot.rightChildRef, searchData);
        }
        return localRoot.nodeData;
    }
    
    public void displayTree(int traverseCode)
    {
        if(traverseCode == PREORDER_TRAVERSE)
        {
            displayPreOrder(BST_Root);
        }
        else if(traverseCode == INORDER_TRAVERSE)
        {
            displayInOrder(BST_Root);
        }
        else if(traverseCode == POSTORDER_TRAVERSE)
        {
            displayPostOrder(BST_Root);
        }
        else
        {
           System.out.println("You entered the wrong print code.");
        }
    }
    
    private void displayPreOrder(BST_Node localRoot)
    {
        if(localRoot != null)
        {
            printCurrentNode(localRoot);
            displayPreOrder(localRoot.leftChildRef);
            displayPreOrder(localRoot.rightChildRef);
        }
    }
    
    private void displayPostOrder(BST_Node localRoot)
    {
        if(localRoot != null)
        {
            displayPreOrder(localRoot.leftChildRef);
            displayPreOrder(localRoot.rightChildRef);
            printCurrentNode(localRoot);
        }
    }
    
    private void displayInOrder(BST_Node localRoot)
    {
        if(localRoot != null)
        {
            displayPreOrder(localRoot.leftChildRef);
            printCurrentNode(localRoot);
            displayPreOrder(localRoot.rightChildRef);
        }
    }
    
    private void printCurrentNode(BST_Node currentNode)
    {
        String formatedString = "" + currentNode.nodeData;
        System.out.println(formatedString);
    }
    
    public void clearTree()
    {
        BST_Root = null;
    }
    
    public boolean isEmpty()
    {
        return BST_Root == null;
    }

    private class BST_Node {
        public BST_Node leftChildRef;
        private GenericData nodeData;
        public BST_Node rightChildRef;
        
        BST_Node(GenericData inData)
        {
            nodeData = inData;
        }
    }
    
}
